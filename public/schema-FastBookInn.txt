// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//////////////////////////////
////     Tables auth     /////
//////////////////////////////

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  firstName     String?
  lastName      String?
  role          String   @default("guest")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions             Session[]
  accounts             Account[]
  Address              Address[]
  HotelReview          HotelReview[]
  Reservation          Reservation[]
  UserWishList         UserWishList[]
  Comment              Comment[]
  BlogPost             BlogPost[]
  TravelerDashboard    TravelerDashboard[]
  TravelerNotification TravelerNotification[]
  TravelerLoyalty      TravelerLoyalty[]
  Refund               Refund[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

/////////////////////////////////////////////////
////      Tables Geographic Datastiques     /////
/////////////////////////////////////////////////

model Country {
  id        String   @id @default(uuid())
  name      String
  order     Int?     @default(100)
  code      String   @unique //quel code ?
  language  String? // plusieur langage possible
  currency  String?  @default("‚Ç¨") //Plusieur voleur possible
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cities City[]
  images GaleryImage[]

  @@map("countries")
}

model City {
  id        String        @id @default(uuid())
  name      String
  order     Int?          @default(100)
  countryId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  images    GaleryImage[]

  country           Country             @relation(fields: [countryId], references: [id], onDelete: Cascade)
  neighborhoods     Neighborhood[]
  landmarks         Landmark[]
  addresses         Address[]
  destinations      Destination[]
  DestinationToCity DestinationToCity[]

  @@map("cities")
}

model Neighborhood {
  id        String   @id @default(uuid())
  name      String
  order     Int?     @default(100)
  cityId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  city   City          @relation(fields: [cityId], references: [id], onDelete: Cascade)
  images GaleryImage[]

  @@map("neighborhoods")
}

model Landmark {
  id          String   @id @default(uuid())
  name        String
  order       Int?     @default(100)
  description String?
  type        String
  cityId      String
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  city    City      @relation(fields: [cityId], references: [id], onDelete: Cascade)
  Address Address[]

  @@map("landmarks")
}

/////////////////////////////////////////////////////
////     Tables Features & Amenities            /////
/////////////////////////////////////////////////////

// üè® Tables de r√©f√©rentiel h√¥telier
model Label {
  id          String        @id @default(uuid())
  name        String
  order       Int?          @default(100)
  code        String        @unique
  description String?
  category    String
  icon        String?
  color       String?
  priority    Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  images      GaleryImage[]

  HotelDetails     HotelDetails?      @relation(fields: [hotelDetailsId], references: [id])
  hotelDetailsId   String?
  HotelCardToLabel HotelCardToLabel[]

  @@map("labels")
}

model Destination {
  id              String        @id @default(uuid())
  name            String
  order           Int?          @default(100)
  description     String?
  type            String
  popularityScore Int           @default(0)
  cityId          String
  latitude        Float?
  longitude       Float?
  radius          Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  images          GaleryImage[]

  HotelCard         HotelCard[]
  City              City[]
  DestinationToCity DestinationToCity[]

  @@map("destinations")
}

model AccommodationType {
  id          String   @id @default(uuid())
  name        String
  order       Int?     @default(100)
  code        String   @unique
  description String?
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  HotelCard HotelCard[]

  @@map("accommodation_types")
}

model HotelGroup {
  id          String   @id @default(uuid())
  name        String // group ou professionnel g√©rer par un particulier
  order       Int?     @default(100)
  description String?
  website     String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  HotelCard HotelCard[]

  @@map("hotel_groups")
}

model HotelHighlight {
  id                        String                      @id @default(uuid())
  title                     String
  order                     Int?                        @default(100)
  description               String?
  category                  String // "Location", "Amenity", "Service", "View", "Offer", "Food"
  icon                      String? // image
  priority                  Int                         @default(0)
  isPromoted                Boolean                     @default(false)
  hotelId                   String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  HotelCardToHotelHighlight HotelCardToHotelHighlight[]

  @@map("hotel_highlights")
}

model HotelAmenity {
  id          String   @id @default(uuid())
  name        String
  order       Int?     @default(100)
  category    String? // Cat√©gorie pour regroupement ("Location", "Amenity", "Service", "View", "Offer", "Food")
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  HotelCard               HotelCard[]
  HotelCardToHotelAmenity HotelCardToHotelAmenity[]

  @@map("hotel_amenities")
}

model AccessibilityOption {
  id                             String                           @id @default(uuid())
  name                           String
  order                          Int?                             @default(100)
  code                           String                           @unique
  description                    String?
  category                       String
  icon                           String?
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  HotelCardToAccessibilityOption HotelCardToAccessibilityOption[]

  @@map("accessibility_options")
}

model HotelParking {
  id          String      @id @default(uuid())
  name        String
  isAvailable Boolean     @default(true)
  spaces      Int?
  order       Int?        @default(100)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  HotelCard   HotelCard[]

  @@map("hotel_parking")
}

model RoomAmenity {
  id          String   @id @default(uuid())
  name        String
  order       Int?     @default(100)
  category    String // Cat√©gorie pour regroupement ("Location", "Amenity", "Service", "View", "Offer", "Food")
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  HotelDetails              HotelDetails[]
  HotelDetailsToRoomAmenity HotelDetailsToRoomAmenity[]
}

///////////////////////////////////////////////
/////     Tables cr√©ation H√©bergement     /////
///////////////////////////////////////////////

model Address {
  id             String         @id @default(uuid())
  name           String?
  streetNumber   String?
  streetType     String? // rue, boulvard, all√©e, place, quai, route, chemin, impasse, lieu-dit,  
  streetName     String
  addressLine2   String?
  postalCode     String
  cityId         String
  neighborhoodId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  city           City           @relation(fields: [cityId], references: [id], onDelete: Cascade)
  hotelDetails   HotelDetails[]
  user           User[]
  landmarks      Landmark[]

  @@map("addresses")
}

model GaleryImage {
  id       String @id @default(uuid())
  entityId String
  imageUrl String

  imageType      String // city hotel room ....
  order          Int           @default(20)
  alt            String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  HotelCard      HotelCard[]
  City           City[]
  Country        Country?      @relation(fields: [countryId], references: [id])
  countryId      String?
  Neighborhood   Neighborhood? @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId String?
  Label          Label?        @relation(fields: [labelId], references: [id])
  labelId        String?
  Destination    Destination[]
  HotelRoom      HotelRoom[]

  @@map("hotel_images")
}

model HotelCard {
  id                             String                           @id @default(uuid())
  name                           String
  idCity                         String
  order                          Int                              @default(20)
  shortDescription               String?
  starRating                     Int
  overallRating                  Float?
  ratingAdjective                String?
  reviewCount                    Int                              @default(0)
  basePricePerNight              Float
  regularPrice                   Float?
  currency                       String                           @default("EUR")
  isPartner                      Boolean                          @default(false)
  promoMessage                   String?
  imageMessage                   String?
  cancellationPolicy             String?
  accommodationTypeId            String?
  destinationId                  String?
  hotelGroupId                   String?
  parking                        HotelParking?                    @relation(fields: [hotelParkingId], references: [id])
  images                         GaleryImage[]
  latitude                       Float? // GPS latitude
  longitude                      Float? // GPS longitude
  HotelAmenity                   HotelAmenity[]
  detailsId                      String?
  accommodationType              AccommodationType?               @relation(fields: [accommodationTypeId], references: [id], onDelete: SetNull)
  destination                    Destination?                     @relation(fields: [destinationId], references: [id], onDelete: SetNull)
  hotelGroup                     HotelGroup?                      @relation(fields: [hotelGroupId], references: [id], onDelete: SetNull)
  HotelCardToHotelHighlight      HotelCardToHotelHighlight[]
  HotelCardToLabel               HotelCardToLabel[]
  HotelCardToAccessibilityOption HotelCardToAccessibilityOption[]
  HotelCardToHotelAmenity        HotelCardToHotelAmenity[]

  HotelFAQ HotelFAQ[]

  HotelPolicy HotelPolicy[]

  HotelRoom HotelRoom[]

  HotelReview HotelReview[]

  UserWishList UserWishList[]

  HotelierDashboard HostDashboard[]

  HotelDetails HotelDetails[]

  TravelerRecommendation TravelerRecommendation[]
  hotelParkingId         String?
}

model HotelDetails {
  id             String   @id @default(uuid())
  idHotelCard    String
  description    String?
  addressId      String
  order          Int?     @default(20)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  checkInTime    String? // "15:00"
  checkOutTime   String? // "11:00" 
  numberOfRooms  Int? // Nombre total de chambres
  numberOfFloors Int? // Nombre d'√©tages
  languages      String[] // Langues parl√©es √† la r√©ception

  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  RoomAmenity               RoomAmenity[]
  Label                     Label[]
  HotelCard                 HotelCard?                  @relation(fields: [HotelCardid], references: [id])
  HotelCardid               String?
  HotelDetailsToRoomAmenity HotelDetailsToRoomAmenity[]

  @@map("hotel_details")
}

model HotelRoom {
  id            String                 @id @default(uuid())
  hotelCardId   String
  name          String
  description   String?
  images        GaleryImage[]
  maxGuests     Int
  bedCount      Int
  bedType       String
  roomSize      Float? // en m¬≤
  pricePerNight Float
  currency      String                 @default("EUR")
  isAvailable   Boolean                @default(true)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  reservations  Reservation[]
  availability  CalendarAvailability[] // Nouveau mod√®le pour g√©rer les disponibilit√©s jourspar jours

  hotelCard          HotelCard            @relation(fields: [hotelCardId], references: [id])
  RoomUnavailability RoomUnavailability[]
  CancellationPolicy CancellationPolicy[]

  @@map("hotel_rooms")
}

//////////////////////////
///      Meta data     ///
//////////////////////////

model HotelReview {
  id           String    @id @default(uuid())
  hotelCardId  String
  userId       String
  rating       Float? // Note de 1 √† 5 (nullable pour les r√©ponses)
  title        String? // Optionnel pour les r√©ponses
  comment      String
  pros         String[] // Points positifs
  cons         String[] // Points n√©gatifs
  roomType     String? // Type de chambre
  stayDate     DateTime? // Nullable pour les r√©ponses
  isVerified   Boolean   @default(false)
  helpfulCount Int       @default(0)

  // Nouveaux champs pour les r√©ponses
  parent   HotelReview?  @relation("ReviewReplies", fields: [parentId], references: [id])
  parentId String?
  replies  HotelReview[] @relation("ReviewReplies")

  // Relations existantes
  hotelCard HotelCard @relation(fields: [hotelCardId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Contraintes
  @@index([hotelCardId])
  @@index([userId])
  @@index([parentId]) // Index pour les r√©ponses
  @@map("hotel_reviews")
}

model HotelPolicy {
  id           String   @id @default(uuid())
  hotelCardId  String   @unique
  checkIn      String // "15:00"
  checkOut     String // "11:00"
  cancellation String // Politique d'annulation
  pets         Boolean  @default(false)
  smoking      Boolean  @default(false)
  parties      Boolean  @default(false)
  children     String? // Politique enfants
  extraBed     String?
  breakfast    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  hotelCard HotelCard @relation(fields: [hotelCardId], references: [id])

  @@map("hotel_policies")
}

model CancellationPolicy {
  id                String   @id @default(uuid())
  name              String
  description       String
  refundPercentage  Int // Pourcentage de remboursement
  daysBeforeCheckIn Int // Nombre de jours avant l'arriv√©e pour appliquer cette politique
  penaltyFee        Float? // Frais fixes d'annulation
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  HotelRoom HotelRoom[]

  Reservation  Reservation[]
  Cancellation Cancellation[]
}

model HotelFAQ {
  id          String   @id @default(uuid())
  hotelCardId String
  question    String
  answer      String
  category    String // "G√©n√©ral", "R√©servation", "Services", etc.
  order       Int      @default(100)
  isPopular   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  hotelCard HotelCard @relation(fields: [hotelCardId], references: [id])

  @@map("hotel_faqs")
}

model UserWishList {
  id          String   @id @default(cuid())
  userId      String
  hotelCardId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotelCard HotelCard @relation(fields: [hotelCardId], references: [id], onDelete: Cascade)

  // Contrainte d'unicit√© : un utilisateur ne peut pas ajouter le m√™me h√¥tel plusieurs fois
  @@unique([userId, hotelCardId])
  @@map("user_wish_lists")
}

//////////////////////////////
///      Reservation     /////
//////////////////////////////
model RoomUnavailability {
  id          String   @id @default(uuid())
  hotelRoomId String
  startDate   DateTime
  endDate     DateTime
  reason      String // "maintenance", "reserved", "out_of_service"
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  hotelRoom HotelRoom @relation(fields: [hotelRoomId], references: [id])

  @@index([hotelRoomId, startDate, endDate])
}

model CalendarAvailability {
  id          String   @id @default(uuid())
  hotelRoomId String
  date        DateTime
  isAvailable Boolean  @default(true)
  price       Float? // Prix sp√©cifique pour cette date
  minStay     Int?     @default(1) // Nuit√©es minimum requises
  maxStay     Int? // Nuit√©es maximum autoris√©es
  stopSell    Boolean  @default(false) // Blocage des ventes pour cette date
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  hotelRoom HotelRoom @relation(fields: [hotelRoomId], references: [id])

  @@unique([hotelRoomId, date])
  @@index([hotelRoomId, isAvailable])
}

model Reservation {
  id                 String    @id @default(uuid())
  userId             String
  hotelRoomId        String
  checkIn            DateTime
  checkOut           DateTime
  guests             Int       @default(1)
  adults             Int       @default(1)
  children           Int       @default(0)
  infants            Int       @default(0)
  totalPrice         Float
  basePrice          Float // Prix de base sans taxes
  taxes              Float // Montant des taxes
  status             String    @default("confirmed") // PENDING   CONFIRMED CANCELLED  REFUNDED  CHECKED_IN  CHECKED_OUT
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  cancellationReason String?
  cancellationDate   DateTime?
  specialRequests    String?

  // Relations
  user                 User                 @relation(fields: [userId], references: [id])
  hotelRoom            HotelRoom            @relation(fields: [hotelRoomId], references: [id])
  cancellationPolicy   CancellationPolicy?  @relation(fields: [cancellationPolicyId], references: [id])
  cancellationPolicyId String?
  Payment              Payment[]
  ReservationHistory   ReservationHistory[]

  // Paiement
  paymentStatus String         @default("pending") // "pending", "paid", "partially_refunded", "fully_refunded"
  paymentMethod String?
  transactionId String?
  Cancellation  Cancellation[]
  Guest         Guest[]

  @@index([hotelRoomId, checkIn, checkOut])
}

model Payment {
  id            String   @id @default(cuid())
  reservationId String
  amount        Float
  method        String // "card", "paypal", "stripe", etc.
  status        String   @default("pending") // paid, refunded, failed
  transactionId String?
  createdAt     DateTime @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id])
}

model Cancellation {
  id               String   @id @default(uuid())
  reservationId    String   @unique
  cancellationDate DateTime @default(now())
  processedBy      String? // ID de l'utilisateur/admin qui a trait√© l'annulation
  reasonCode       String? // "client", "hotel", "no_show", etc.
  reasonDetails    String? // D√©tails suppl√©mentaires

  // Informations de remboursement
  refundAmount    Float
  refundMethod    String? // "credit_card", "voucher", "bank_transfer"
  refundStatus    String  @default("pending") // "pending", "processed", "failed"
  refundReference String? // R√©f√©rence du remboursement

  // Politique appliqu√©e
  policyId       String?
  penaltyApplied Float?
  nightsCharged  Int? // Nuit√©es factur√©es malgr√© l'annulation

  // Relations
  reservation Reservation         @relation(fields: [reservationId], references: [id])
  policy      CancellationPolicy? @relation(fields: [policyId], references: [id])

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Refund    Refund[]

  @@index([reservationId])
  @@index([cancellationDate])
  @@index([refundStatus])
}

model Refund {
  id             String    @id @default(uuid())
  cancellationId String
  amount         Float
  paymentMethod  String
  transactionId  String?
  status         String    @default("pending") // "pending", "completed", "failed"
  processedAt    DateTime?
  processedById  String?
  processedBy    User?     @relation(fields: [processedById], references: [id])

  // Relations
  cancellation Cancellation @relation(fields: [cancellationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cancellationId])
  @@index([status])
}

//////////////////////////////
////     notification     ////
//////////////////////////////
model HostNotification {
  id          String   @id @default(uuid())
  dashboardId String
  type        String // "booking", "review", "maintenance", etc.
  message     String
  isRead      Boolean  @default(false)
  priority    String   @default("medium") // "low", "medium", "high"
  relatedId   String? // ID de l'entit√© concern√©e (r√©servation, avis, etc.)
  createdAt   DateTime @default(now())

  dashboard HostDashboard @relation(fields: [dashboardId], references: [id])

  @@index([dashboardId])
  @@index([isRead])
  @@index([createdAt])
}

model TravelerNotification {
  id        String    @id @default(uuid())
  userId    String
  type      String // "reservation", "promotion", "reminder"
  title     String
  message   String
  isRead    Boolean   @default(false)
  relatedId String? // ID de la r√©servation/offre concern√©e
  createdAt DateTime  @default(now())
  expiresAt DateTime? // Pour les promotions limit√©es

  user User @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@map("client_notifications")
}

////////////////////////////////////////
///       Loyalty et r√©compenses     ///
////////////////////////////////////////
model TravelerLoyalty {
  id               String    @id @default(uuid())
  userId           String    @unique
  points           Int       @default(0)
  tier             String    @default("basic") // "basic", "silver", "gold", "platinum"
  membershipNumber String    @unique
  joinDate         DateTime  @default(now())
  lastActivity     DateTime  @updatedAt
  expiryDate       DateTime? // Si les points expirent
  lifetimePoints   Int       @default(0)

  // Pr√©f√©rences
  newsletterOptIn    Boolean @default(true)
  partnerOffersOptIn Boolean @default(false)

  // Statistiques
  totalStays  Int   @default(0)
  totalNights Int   @default(0)
  totalSpent  Float @default(0)

  // Relations
  user         User                 @relation(fields: [userId], references: [id])
  rewards      LoyaltyReward[]
  transactions LoyaltyTransaction[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([tier])
  @@index([points])
  @@map("traveler_loyalties")
}

model LoyaltyReward {
  id          String    @id @default(uuid())
  loyaltyId   String
  rewardType  String // "free_night", "upgrade", "discount", "experience"
  name        String
  description String?
  pointsCost  Int
  isRedeemed  Boolean   @default(false)
  redeemedAt  DateTime?
  expiryDate  DateTime?
  createdAt   DateTime  @default(now())

  loyalty TravelerLoyalty @relation(fields: [loyaltyId], references: [id])

  @@index([loyaltyId])
  @@index([isRedeemed])
  @@map("loyalty_rewards")
}

model LoyaltyTransaction {
  id          String   @id @default(uuid())
  loyaltyId   String
  type        String // "earn", "redeem", "expire", "adjustment"
  points      Int
  description String?
  referenceId String? // ID de la r√©servation/action li√©e
  createdAt   DateTime @default(now())

  loyalty TravelerLoyalty @relation(fields: [loyaltyId], references: [id])

  @@index([loyaltyId])
  @@index([type])
  @@index([createdAt])
  @@map("loyalty_transactions")
}

/////////////////
///    Log    ///
/////////////////

model ReservationHistory {
  id            String   @id @default(uuid())
  reservationId String
  action        String // "created", "modified", "cancelled", "refunded"
  changedBy     String // "user", "admin", "system"
  changedById   String? // ID de l'utilisateur/admin
  oldData       Json? // Donn√©es avant modification
  newData       Json? // Donn√©es apr√®s modification
  notes         String?
  createdAt     DateTime @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id])
}

model HostDashboard {
  id          String   @id @default(uuid())
  hotelCardId String   @unique
  lastUpdated DateTime @default(now())

  // Statistiques de r√©servation
  totalBookings     Int   @default(0)
  upcomingBookings  Int   @default(0)
  currentGuests     Int   @default(0)
  cancellationRate  Float @default(0)
  averageStayLength Float @default(0)

  // Performance financi√®re
  monthlyRevenue Float @default(0)
  occupancyRate  Float @default(0)
  adr            Float @default(0) // Average Daily Rate
  revpar         Float @default(0) // Revenue Per Available Room

  // Avis et satisfaction
  averageRating   Float @default(0)
  totalReviews    Int   @default(0)
  positiveReviews Int   @default(0)
  negativeReviews Int   @default(0)
  responseRate    Float @default(0) // Taux de r√©ponse aux commentaires

  // Alertes et actions requises
  pendingRequests   Int @default(0) // Demandes sp√©ciales en attente
  maintenanceIssues Int @default(0) // Probl√®mes de maintenance
  lowInventoryItems Int @default(0) // Articles en faible stock

  // M√©triques de chambre
  availableRooms   Int @default(0)
  occupiedRooms    Int @default(0)
  maintenanceRooms Int @default(0)

  // Donn√©es temporelles
  lastBookingDate DateTime?
  nextCheckIn     DateTime?
  nextCheckOut    DateTime?

  // Relations
  hotelCard HotelCard @relation(fields: [hotelCardId], references: [id])

  // Widgets personnalis√©s (configuration JSON)
  widgetConfig Json? // Configuration des widgets du dashboard

  // Historique des performances (snapshots mensuels)
  performanceHistory Json? // Donn√©es historiques format√©es

  // Timestamps
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  HostNotification HostNotification[]

  @@index([hotelCardId])
  @@map("hotelier_dashboards")
}

model TravelerDashboard {
  id          String   @id @default(uuid())
  userId      String   @unique
  lastUpdated DateTime @default(now())

  // Statistiques de r√©servation
  totalBookings     Int     @default(0)
  upcomingBookings  Int     @default(0)
  pastBookings      Int     @default(0)
  cancelledBookings Int     @default(0)
  favoriteHotelType String? // Type d'h√©bergement pr√©f√©r√©

  // Pr√©f√©rences et activit√©
  wishlistCount      Int   @default(0)
  reviewsWritten     Int   @default(0)
  commentsWritten    Int   @default(0)
  averageRatingGiven Float @default(0) // Moyenne des notes donn√©es

  // Derni√®res activit√©s
  lastBookingDate DateTime?
  lastReviewDate  DateTime?
  lastLoginDate   DateTime?

  // Recommandations personnalis√©es
  recommendedHotels String[] // IDs des h√¥tels recommand√©s
  trendingInArea    String[] // IDs des h√¥tels tendance dans ses zones favorites

  // Relations
  user User @relation(fields: [userId], references: [id])

  // Configuration
  preferredView  String?  @default("overview") // Vue par d√©faut
  hiddenSections String[] // Sections masqu√©es par l'utilisateur

  // Timestamps
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  TravelerRecommendation TravelerRecommendation[]

  @@index([userId])
  @@map("client_dashboards")
}

////////////////////
///     Blog     ///
////////////////////
model BlogPost {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  content       String
  excerpt       String?
  featuredImage String?
  published     Boolean   @default(false)
  publishedAt   DateTime?

  // Relations
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  categories Category[] @relation("PostCategories")
  tags       Tag[]      @relation("PostTags")
  comments   Comment[]

  // Metadata
  viewCount      Int     @default(0)
  seoTitle       String?
  seoDescription String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([published])
  @@index([authorId])
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  posts       BlogPost[] @relation("PostCategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model Tag {
  id    String     @id @default(uuid())
  name  String
  slug  String     @unique
  posts BlogPost[] @relation("PostTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model Comment {
  id      String @id @default(uuid())
  content String

  // Relations
  post     BlogPost  @relation(fields: [postId], references: [id])
  postId   String
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentReplies")

  // Metadata
  ipAddress String?
  userAgent String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

//////////////////////////////
//// Tables de jointure //////
//////////////////////////////

model HotelCardToHotelHighlight {
  hotelCardId      String   @map("hotel_card_id")
  hotelHighlightId String   @map("hotel_highlight_id")
  order            Int?     @default(100)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  hotelCard      HotelCard      @relation(fields: [hotelCardId], references: [id])
  hotelHighlight HotelHighlight @relation(fields: [hotelHighlightId], references: [id])

  @@id([hotelCardId, hotelHighlightId])
  @@map("hotel_card_to_highlights")
}

model HotelCardToLabel {
  hotelCardId String   @map("hotel_card_id")
  labelId     String   @map("label_id")
  order       Int?     @default(100)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  hotelCard HotelCard @relation(fields: [hotelCardId], references: [id])
  label     Label     @relation(fields: [labelId], references: [id])

  @@id([hotelCardId, labelId])
  @@map("hotel_card_to_labels")
}

model HotelCardToAccessibilityOption {
  hotelCardId           String   @map("hotel_card_id")
  accessibilityOptionId String   @map("accessibility_option_id")
  order                 Int?     @default(100)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  hotelCard           HotelCard           @relation(fields: [hotelCardId], references: [id])
  accessibilityOption AccessibilityOption @relation(fields: [accessibilityOptionId], references: [id])

  @@id([hotelCardId, accessibilityOptionId])
  @@map("hotel_card_to_accessibility")
}

model HotelCardToHotelAmenity {
  hotelCardId    String   @map("hotel_card_id")
  hotelAmenityId String   @map("hotel_amenity_id")
  order          Int?     @default(100)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  hotelCard    HotelCard    @relation(fields: [hotelCardId], references: [id])
  hotelAmenity HotelAmenity @relation(fields: [hotelAmenityId], references: [id])

  @@id([hotelCardId, hotelAmenityId])
  @@map("hotel_card_to_amenities")
}

model HotelDetailsToRoomAmenity {
  hotelDetailsId String   @map("hotel_details_id")
  roomAmenityId  String   @map("room_amenity_id")
  order          Int?     @default(100)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  hotelDetails HotelDetails @relation(fields: [hotelDetailsId], references: [id])
  roomAmenity  RoomAmenity  @relation(fields: [roomAmenityId], references: [id])

  @@id([hotelDetailsId, roomAmenityId])
  @@map("hotel_details_to_room_amenities")
}

model DestinationToCity {
  destinationId String   @map("destination_id")
  cityId        String   @map("city_id")
  order         Int?     @default(100)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  destination Destination @relation(fields: [destinationId], references: [id])
  city        City        @relation(fields: [cityId], references: [id])

  @@id([destinationId, cityId])
  @@map("destination_to_cities")
}

model TravelerRecommendation {
  travelerId String
  hotelId    String

  traveler TravelerDashboard @relation(fields: [travelerId], references: [id])
  hotel    HotelCard         @relation(fields: [hotelId], references: [id])

  @@id([travelerId, hotelId])
}

model Guest {
  id            String      @id @default(uuid())
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id])

  fullName  String
  email     String?
  phone     String?
  birthDate DateTime?

  passportNumber String?

  @@index([reservationId])
}
